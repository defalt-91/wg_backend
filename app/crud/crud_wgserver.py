from sqlalchemy.orm import Session
from app.crud.base import CRUDBase
from app.models.client import Client
from app.models.wgserver import WGServer
from app.schemas.wgserver import WGServerCreate,WGServerUpdate
from app.core.Settings import get_settings
import subprocess
import json
import os
import logging

settings = get_settings()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CRUDWGServer(CRUDBase[WGServer,WGServerCreate,WGServerUpdate]):
    def get_server_config(self, session: Session) -> WGServer:
        return session.query(self.model).first()
    def create_write_wgserver_conf_from_orm(self,orm_server:WGServer):
        logger.info(f"Writing database server config file to: {settings.WG_CONFIGPATH}{settings.WG_INTERFACE}.conf")
        result = []
        result.append("# Note: Do not edit this file directly.")
        result.append(f"# Your changes will be overwritten!{os.linesep}# Server")
        result.append(f"{os.linesep}[Interface]")
        result.append(f"PrivateKey = {orm_server.privateKey}")
        result.append(f"Address = {orm_server.address}/24")
        result.append(f"ListenPort = {settings.WG_PORT}")
        result.append(f"MTU = {settings.WG_MTU}")
        result.append(f"PreUp = {settings.WG_PRE_UP}")
        result.append(f"PostUp = {settings.WG_POST_UP}")
        result.append(f"PreDown = {settings.WG_PRE_DOWN}")
        result.append(f"PostDown = {settings.WG_POST_DOWN}")
        result.extend(self.create_peers_str(orm_server.clients))
        logger.debug('Server Config saving...')
        with open(f"{settings.WG_CONFIGPATH}wg0.conf","w+") as f:
            f.write(os.linesep.join(result))
        logger.debug('Server Config saved.')
        
    def create_peers_str(self,clients:list[Client]) -> str:
        # logger.info(f"Writing peers config file to: {settings.WG_PEERS_CONFIG_PATH}")
        conf = []
        for client in clients:
            if not client.enabled:
                continue
            conf.append(f"{os.linesep}[Peer]")
            if client.friendly_name:
                conf.append(f"# friendly_name = {client.friendly_name}")
            if client.friendly_json is not None:
                value = json.dumps(client.friendly_json)
                conf.append(f"# friendly_json = {value}")
            conf.append(f"# Client: {client.name} ({client.id})")
            conf.append(f"PublicKey = {client.publicKey}")
            if client.preSharedKey:
                conf.append(f"PresharedKey = {client.preSharedKey}")
            # if client.endpoint_host:
            #     conf.append(f"Endpoint = {settings.WG_HOST}:{settings.WG_PORT}")
            if client.persistentKeepalive:
                conf.append(f"PersistentKeepalive = {client.persistentKeepalive}")
            conf.append(f"AllowedIPs = {client.address}/32")
        return conf
    def sync_wg_quicks_strip(self):
        logger.debug('Config syncing...')
        (exit_code,output)=subprocess.getstatusoutput(f'wg syncconf wg0 <(wg-quick strip wg0)')
        logger.debug(f'Config synced.\noutput: {output}')

    def save_and_sync_wg_peer_config(self,wgserver:WGServer):
        self.create_write_wgserver_conf_from_orm(orm_server=wgserver)
        self.sync_wg_quicks_strip()
        
crud_wgserver=CRUDWGServer(WGServer)