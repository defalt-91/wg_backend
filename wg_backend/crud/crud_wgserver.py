import json
import logging
import os
from subprocess import CompletedProcess
from typing import Any, Type

from sqlalchemy.orm import Session

from wg_backend.api import exceptions
from wg_backend.api.utils import get_wg_dump_data, wg_show_lha_cmd, wg_show_transfer_cmd
from wg_backend.core.settings import get_settings
from wg_backend.crud.base import CRUDBase
from wg_backend.models.peer import Peer
from wg_backend.models.wg_interface import WGInterface
from wg_backend.schemas.Peer import DBPlusStdoutPeer, DbDataPeer, StdoutDumpPeer, StdoutRxTxPlusLhaPeer
from wg_backend.schemas.wg_interface import WGInterfaceCreate, WGInterfaceUpdate


settings = get_settings()
logging.basicConfig(level = settings.LOG_LEVEL)
logger = logging.getLogger(__name__)


class CRUDWGInterface(CRUDBase[WGInterface, WGInterfaceCreate, WGInterfaceUpdate]):
    def get_if_db(self, session: Session, interface_id: int) -> Type[WGInterface] | None:
        return session.query(self.model).get(ident = interface_id)

    def get_if_private_key(self, session: Session, interface_id: int) -> Type[WGInterface] | None:
        return session.query(self.model).get(ident = interface_id)

    @classmethod
    def create_write_wg_quick_config_file(cls, db_wg_if = WGInterface) -> Type[WGInterface]:
        result = []
        result.append("# Note: Do not edit this file directly.")
        result.append(f"# Your changes will be overwritten!{os.linesep}# Server")
        result.append(f"{os.linesep}[Interface]")
        result.append(f"PrivateKey = {db_wg_if.private_key}")
        result.append(f"Address = {settings.WG_SUBNET}")
        result.append(f"ListenPort = {settings.WG_HOST_PORT}")
        if settings.WG_MTU:
            result.append(f"MTU = {settings.WG_MTU}")
        result.append(f"PreUp = {settings.WG_PRE_UP}")
        result.append(f"PostUp = {settings.WG_POST_UP}")
        result.append(f"PreDown = {settings.WG_PRE_DOWN}")
        result.append(f"PostDown = {settings.WG_POST_DOWN}")
        # result.append(f"SaveConfig = true")
        logger.debug("Interface config saving...")
        peers = db_wg_if.peers
        with open(file = settings.wg_if_config_file_path, mode = "w", encoding = "utf-8") as f:
            f.write(os.linesep.join(result))
            logger.debug(f"Interface config saved to -->{settings.wg_if_config_file_path}")
        # peers_conf = cls.create_write_peers_config_file(peers)
        return db_wg_if

    @staticmethod
    def create_write_peers_config_file(peers: list[Peer]) -> list[str]:
        # logger.debug("Peers loading from database ...")
        conf = []
        for peer in peers:
            if not peer.enabled:
                continue
            conf.append(f"{os.linesep}[Peer]")
            if peer.friendly_name:
                conf.append(f"# friendly_name = {peer.friendly_name}")
            if peer.friendly_json is not None:
                value = json.dumps(peer.friendly_json)
                conf.append(f"# friendly_json = {value}")
            conf.append(f"# Peer: {peer.name} ({peer.id})")
            conf.append(f"PublicKey = {peer.public_key}")
            if peer.preshared_key:
                conf.append(f"PresharedKey = {peer.preshared_key}")
            # if peer.endpoint_host:
            #     conf.append(f"Endpoint = {settings.WG_HOST}:{settings.WG_PORT}")
            if peer.persistent_keepalive:
                conf.append(f"PersistentKeepalive = {peer.persistent_keepalive}")
            conf.append(f"AllowedIPs = {peer.address}/32")
        with open(file = settings.wg_if_peers_config_file_path, mode = "w", encoding = "utf-8") as f:
            f.write(os.linesep.join(conf))
            logger.debug(f"Interface peers config file saved to: {settings.wg_if_peers_config_file_path}")
        return conf

    @staticmethod
    def get_rxtx_lha_config() -> list[StdoutRxTxPlusLhaPeer]:
        peers_rxtx_lha: list[StdoutRxTxPlusLhaPeer] = []
        # cmd = ["sudo", "wg", "show", settings.WG_INTERFACE_NAME, "transfer"]
        # cmd2 = ["sudo", "wg", "show", settings.WG_INTERFACE_NAME, "latest-handshakes"]
        transfer_proc = wg_show_transfer_cmd()
        lha_proc = wg_show_lha_cmd()
        if transfer_proc.stderr or lha_proc.stderr:
            raise exceptions.wg_dump_error(transfer_proc.stderr)
        if transfer_proc.stdout and lha_proc.stdout:
            rxtx_list: list[str] = transfer_proc.stdout.strip().split(os.linesep)
            lha_list: list[str] = lha_proc.stdout.strip().split(os.linesep)
            peers_rxtx_lha = [
                StdoutRxTxPlusLhaPeer.from_rxtx_lha_stdout(
                    rx_rt_str = rxtx_str,
                    lha_str = lha_str
                ) for rxtx_str, lha_str in zip(rxtx_list, lha_list)
            ]
        return peers_rxtx_lha




crud_wg_interface = CRUDWGInterface(WGInterface)
